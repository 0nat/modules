package org.motechproject.mtraining.service.it;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.motechproject.mtraining.domain.*;
import org.motechproject.mtraining.repository.ChapterDataService;
import org.motechproject.mtraining.service.MTrainingService;
import org.motechproject.testing.osgi.BasePaxIT;
import org.motechproject.testing.osgi.container.MotechNativeTestContainerFactory;
import org.ops4j.pax.exam.ExamFactory;
import org.ops4j.pax.exam.junit.PaxExam;
import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
import org.ops4j.pax.exam.spi.reactors.PerSuite;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;
import static org.junit.Assert.assertEquals;

/**
 * Verify that mTrainingService present, functional.
 */
@RunWith(PaxExam.class)
@ExamReactorStrategy(PerSuite.class)
@ExamFactory(MotechNativeTestContainerFactory.class)
public class MTrainingServiceIT extends BasePaxIT {

    @Inject
    private MTrainingService mTrainingService;

    @Test
    public void testMTrainingServiceInstance() throws Exception {
        assertNotNull(mTrainingService);
    }

    @Test
    public void testCourseCreation() throws Exception {
        ClassLoader old = Thread.currentThread().getContextClassLoader();
        try {
            Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());

            Course course = mTrainingService.createCourse(new Course("MyCourse", CourseUnitState.Active, "FooBar.com/ivr1"));
            assertNotNull(course);

            List<Course> saved = mTrainingService.getCourseByName("MyCourse");
            assertTrue(saved.size() > 0);
        } finally {
            Thread.currentThread().setContextClassLoader(old);
        }
    }

    @Test
    public void testFullCourseCreation() throws Exception {
        ClassLoader old = Thread.currentThread().getContextClassLoader();
        try {
            Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());
            Course testCourse = generateFullCourse("testFullCourseCreation");
            testCourse = mTrainingService.createCourse(testCourse);
            List<Course> saved = mTrainingService.getCourseByName("testFullCourseCreation");
            assertTrue(saved.size() > 0);

        } finally {
            Thread.currentThread().setContextClassLoader(old);
        }
    }

    @Test
    public void testAutoGeneratedFields() throws Exception {
        ClassLoader old = Thread.currentThread().getContextClassLoader();
        try {
            Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());
            Course testCourse = generateFullCourse("testAutoGeneratedFields");
            assertNull(testCourse.getModificationDate());
            assertNull(testCourse.getCreationDate());
            mTrainingService.createCourse(testCourse);

            List<Course> saved = mTrainingService.getCourseByName("testAutoGeneratedFields");
            assertTrue(saved.size() > 0);
            Course returned = saved.get(0);
            assertNotNull(returned.getId());
            assertNotNull(returned.getCreationDate());
            assertNotNull(returned.getModificationDate());
        } finally {
            Thread.currentThread().setContextClassLoader(old);
        }
    }

    @Test
    public void testCourseLookup() throws Exception {
        ClassLoader old = Thread.currentThread().getContextClassLoader();
        try {
            Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());
            int courseCount = mTrainingService.getCourseByName("testCourseLookup").size();
            mTrainingService.createCourse(generateFullCourse("testCourseLookup"));
            List<Course> lookup = mTrainingService.getCourseByName("testCourseLookup");
            assertEquals(courseCount + 1, lookup.size());
        } finally {
            Thread.currentThread().setContextClassLoader(old);
        }
    }

    @Test
    public void testCourseDeletion() throws Exception {
        ClassLoader old = Thread.currentThread().getContextClassLoader();
        try {
            Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());
            int courseCount = mTrainingService.getCourseByName("testCourseDeletion").size();
            Course toDelete = mTrainingService.createCourse(generateFullCourse("testCourseDeletion"));
            List<Course> lookup = mTrainingService.getCourseByName("testCourseLookup");
            assertEquals(courseCount + 1, lookup.size());

            mTrainingService.deleteCourse(toDelete.getId());
            lookup = mTrainingService.getCourseByName("testCourseDeletion");
            assertEquals(courseCount, lookup.size());

        } finally {
            Thread.currentThread().setContextClassLoader(old);
        }
    }

    @Test
    public void testSubChapterDeletion() throws Exception {
        ClassLoader old = Thread.currentThread().getContextClassLoader();
        try {
            Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());

            // build course
            Course toAdd = generateFullCourse("testSubChapterDeletion");
            List<Chapter> existing = toAdd.getChapters();
            existing.add(new Chapter("subChapterToDelete", CourseUnitState.Active, "RandomContentLink"));
            toAdd.setChapters(existing);
            Course added = mTrainingService.createCourse(toAdd);
            Course lookup = mTrainingService.getCourseById(added.getId());
            assertNotNull(lookup);

            // verify chapter in course
            boolean found = false;
            long chapterId = -1;
            for (Chapter current : lookup.getChapters()) {
                if (current.getName() == "subChapterToDelete") {
                    found = true;
                    chapterId = current.getId();
                }
            }
            assertTrue(found);

            // delete chapter in course
            mTrainingService.deleteChapter(chapterId);

            // lookup course exists and verify that chapter was deleted
            lookup = mTrainingService.getCourseById(added.getId());
            assertNotNull(lookup);
            found = false;
            for (Chapter current : lookup.getChapters()) {
                if (current.getName() == "subChapterToDelete") {
                    found = true;
                    chapterId = current.getId();
                }
            }
            assertFalse(found);
        } finally {
            Thread.currentThread().setContextClassLoader(old);
        }
    }

    @Test
    public void testSubUnitCascadeDelete() throws Exception {
        ClassLoader old = Thread.currentThread().getContextClassLoader();
        try {
            Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());
            Course newCourse = new Course("CascadeCourse", CourseUnitState.Active, "MyRandomCourseContent");
            Chapter newChapter = new Chapter("CascadeChapter", CourseUnitState.Active, "SomeRandomChapterContent");
            Lesson newLesson = new Lesson("CascadeLesson", CourseUnitState.Active, "SomeRandomLessonContent");
            Quiz newQuiz = new Quiz("CascadeQuiz", null, "RandomQuizResourceLink");

            newChapter.setQuiz(newQuiz);
            newChapter.setLessons(new ArrayList<Lesson>(Arrays.asList(newLesson)));
            newCourse.setChapters(new ArrayList<Chapter>(Arrays.asList(newChapter)));
            Course addedCourse = mTrainingService.createCourse(newCourse);

            assertNotNull(addedCourse);
            assertNotNull(mTrainingService.getChapterByName("CascadeChapter"));
            assertNotNull(mTrainingService.getLessonByName("CascadeLesson"));
            assertNotNull(mTrainingService.getCourseByName("CascadeCourse"));

            long chapterId = -1;
            long lessonId = -1;
            Quiz addedQuiz = new Quiz();
            for (Chapter currentChapter : addedCourse.getChapters()) {
                chapterId = currentChapter.getId();
                addedQuiz = currentChapter.getQuiz();
                for (Lesson currentLesson : currentChapter.getLessons()) {
                    lessonId = currentLesson.getId();
                }
            }

        } finally {
            Thread.currentThread().setContextClassLoader(old);
        }
    }

    @Test
    public void testSharedChapterCreation() throws Exception {
        ClassLoader old = Thread.currentThread().getContextClassLoader();
        try {
            Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());
            Course firstCourse = mTrainingService.createCourse(generateFullCourse("testSharedChapter"));

            Chapter sharedChapter = firstCourse.getChapters().get(0);
            Course secondCourse = mTrainingService.createCourse(
                    new Course("secondCourse", CourseUnitState.Active, "RandomCourseIntro", new ArrayList<>(Arrays.asList(sharedChapter))));
            assertNotNull(secondCourse);

            firstCourse = mTrainingService.getCourseById(firstCourse.getId());
            assertEquals(firstCourse.getChapters().size(), secondCourse.getChapters().size());

        } finally {
            Thread.currentThread().setContextClassLoader(old);
        }
    }

    @Test
    public void testCourseChapterUpdate() throws Exception {
        ClassLoader old = Thread.currentThread().getContextClassLoader();
        try {
            Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());
            Course firstCourse = mTrainingService.createCourse(generateFullCourse("testSharedChapter"));

            Chapter chapterToUpdate = firstCourse.getChapters().get(0);
            chapterToUpdate.setState(CourseUnitState.Inactive);
            Chapter updatedChapter = mTrainingService.updateChapter(chapterToUpdate);
            firstCourse = mTrainingService.getCourseById(firstCourse.getId());

            assertEquals(firstCourse.getChapters().get(0).getId(), updatedChapter.getId());
            assertEquals(firstCourse.getChapters().get(0).getState(), updatedChapter.getState());

        } finally {
            Thread.currentThread().setContextClassLoader(old);
        }
    }

    private Course generateFullCourse(String namePrefix) {
        Course myCourse = new Course(namePrefix, CourseUnitState.Active, "motech.com/courseIntro");
        Chapter chapter1 = new Chapter(namePrefix + "chapter1", CourseUnitState.Active, "motech.com/chapter1Intro");
        Chapter chapter2 = new Chapter(namePrefix + "chapter2", CourseUnitState.Active, "motech.com/chapter2Intro");

        Lesson lesson1 = new Lesson(namePrefix + "lesson1", CourseUnitState.Active, "motech.com/lesson1Intro");
        Lesson lesson2 = new Lesson(namePrefix + "lesson2", CourseUnitState.Active, "motech.com/lesson2Intro");
        Lesson lesson3 = new Lesson(namePrefix + "lesson3", CourseUnitState.Active, "motech.com/lesson3Intro");

        Question q1 = new Question("Why do we exist?", "42");
        Question q2 = new Question("Who can never be sick?", "Chuck Norris");
        Question q3 = new Question("motech.com/question3.wav", "b");
        Question q4 = new Question("motech.com/question4.mp4", "a");

        Quiz quiz1 = new Quiz(namePrefix + "quiz1", CourseUnitState.Active, "RandomResourceLink", new ArrayList<>(Arrays.asList(q1, q2, q3, q4)), 90.9);

        chapter1.setLessons(new ArrayList<Lesson>(Arrays.asList(lesson1, lesson2)));
        chapter1.setQuiz(quiz1);
        chapter2.setLessons(new ArrayList<Lesson>(Arrays.asList(lesson3)));
        myCourse.setChapters(new ArrayList<Chapter>(Arrays.asList(chapter1, chapter2)));

        return myCourse;
    }
}
