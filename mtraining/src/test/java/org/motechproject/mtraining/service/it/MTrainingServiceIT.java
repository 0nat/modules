package org.motechproject.mtraining.service.it;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.motechproject.mtraining.domain.*;
import org.motechproject.mtraining.service.MTrainingService;
import org.motechproject.testing.osgi.BasePaxIT;
import org.motechproject.testing.osgi.container.MotechNativeTestContainerFactory;
import org.ops4j.pax.exam.ExamFactory;
import org.ops4j.pax.exam.junit.PaxExam;
import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
import org.ops4j.pax.exam.spi.reactors.PerSuite;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;

/**
 * Verify that mTrainingService present, functional.
 */
@RunWith(PaxExam.class)
@ExamReactorStrategy(PerSuite.class)
@ExamFactory(MotechNativeTestContainerFactory.class)
public class MTrainingServiceIT extends BasePaxIT {

    @Inject
    private MTrainingService mTrainingService;

    @Test
    public void testMTrainingServiceInstance() throws Exception {
        assertNotNull(mTrainingService);
    }

    @Test
    public void testCourseCreation() throws Exception {
        ClassLoader old = Thread.currentThread().getContextClassLoader();
        try {
            Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());

            Course course = mTrainingService.createCourse(new Course("MyCourse", CourseUnitState.Active, "FooBar.com/ivr1"));
            assertNotNull(course);

            List<Course> saved = mTrainingService.getCourseByName("MyCourse");
            assertTrue(saved.size() > 0);
        } finally {
            Thread.currentThread().setContextClassLoader(old);
        }
    }

    @Test
    public void testFullCourseCreation() throws Exception {
        ClassLoader old = Thread.currentThread().getContextClassLoader();
        try {
            Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());
            Course testCourse = generateFullCourse("testFullCourseCreation");
            testCourse = mTrainingService.createCourse(testCourse);
            List<Course> saved = mTrainingService.getCourseByName("testFullCourseCreation");
            assertTrue(saved.size() > 0);

        } finally {
            Thread.currentThread().setContextClassLoader(old);
        }
    }

    @Test
    public void testAutoGeneratedFields() throws Exception {
        ClassLoader old = Thread.currentThread().getContextClassLoader();
        try {
            Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());
            Course testCourse = generateFullCourse("testAutoGeneratedFields");
            assertNull(testCourse.getModificationDate());
            assertNull(testCourse.getCreationDate());
            mTrainingService.createCourse(testCourse);

            List<Course> saved = mTrainingService.getCourseByName("testAutoGeneratedFields");
            assertTrue(saved.size() > 0);
            Course returned = saved.get(0);
            assertNotNull(returned.getId());
            assertNotNull(returned.getCreationDate());
            assertNotNull(returned.getModificationDate());
        } finally {
            Thread.currentThread().setContextClassLoader(old);
        }
    }

    @Test
    public void testCourseLookup() throws Exception {
        int courseCount = mTrainingService.getCourseByName("testCourseLookup").size();
        mTrainingService.createCourse(generateFullCourse("testCourseLookup"));
        List<Course> lookup = mTrainingService.getCourseByName("testCourseLookup");
        assertEquals(courseCount + 1, lookup.size());
    }

    private Course generateFullCourse(String courseName) {
        Course myCourse = new Course(courseName, CourseUnitState.Active, "motech.com/courseIntro");
        Chapter chapter1 = new Chapter("chapter1", CourseUnitState.Active, "motech.com/chapter1Intro");
        Chapter chapter2 = new Chapter("chapter2", CourseUnitState.Active, "motech.com/chapter2Intro");

        Lesson lesson1 = new Lesson("lesson1", CourseUnitState.Active, "motech.com/lesson1Intro");
        Lesson lesson2 = new Lesson("lesson2", CourseUnitState.Active, "motech.com/lesson2Intro");
        Lesson lesson3 = new Lesson("lesson3", CourseUnitState.Active, "motech.com/lesson3Intro");

        Question q1 = new Question("Why do we exist?", "42");
        Question q2 = new Question("Who can never be sick?", "Chuck Norris");
        Question q3 = new Question("motech.com/question3.wav", "b");
        Question q4 = new Question("motech.com/question4.mp4", "a");

        Quiz quiz1 = new Quiz("quiz1", new ArrayList<>(Arrays.asList(q1, q2, q3, q4)), 75.6);

        chapter1.setLessons(Arrays.asList(lesson1, lesson2));
        chapter1.setQuiz(quiz1);
        chapter2.setLessons(Arrays.asList(lesson3));
        myCourse.setChapters(Arrays.asList(chapter1, chapter2));

        return myCourse;
    }
}
